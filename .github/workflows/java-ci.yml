# GitHub Actions CI/CD Pipeline for Java Projects
# This workflow builds and tests the Java project on multiple versions

name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Define environment variables for the entire workflow
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  test:
    name: Test on Java ${{ matrix.java-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17, 21]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (Java ${{ matrix.java-version }})
        path: '**/build/test-results/test/TEST-*.xml'
        reporter: java-junit
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          **/build/test-results/test/
          **/build/reports/tests/test/
          
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run static analysis
      run: |
        ./gradlew check --continue
        
    - name: Generate JaCoCo coverage report
      run: ./gradlew jacocoTestReport
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: SonarQube analysis
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ "$SONAR_TOKEN" != "" ]; then
          ./gradlew sonarqube
        else
          echo "SonarQube analysis skipped - SONAR_TOKEN not configured"
        fi
        
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Build Docker image (if Dockerfile exists)
      if: hashFiles('Dockerfile') != ''
      run: |
        docker build -t ${{ github.repository }}:${{ github.sha }} .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/build/libs/*.jar
          **/build/distributions/*
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Dependency vulnerability scan
      run: |
        ./gradlew dependencyCheckAnalyze || true
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        
  notification:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful! ðŸŽ‰"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed! ðŸš¨"
        # Add failure notification logic