[SCENE 1: INTRODUCTION - 60 SECONDS]

Hi everyone, and welcome back. In this video, we're going to talk about a feature that was introduced in Java 10 and has quickly become a favorite among developers: local variable type inference, using the var reserved type name.

So, what is var? It's a way to declare local variables without having to explicitly write out the type. The Java compiler infers, or figures out, the type based on what you assign to the variable. It's important to know that this is not dynamic typing like you might see in Python or JavaScript. The type is still checked at compile time, so your code is just as safe and type-secure as it was before.

The main goal of var is to cut down on redundant, boilerplate code and make your code easier to read, especially when you're dealing with complex, generic types.

[SCENE 2: HOW TO USE VAR - 90 SECONDS]

Let's look at a simple comparison. Before var, you would write something like this:

String message = "Hello, Java!";

With var, it becomes:

var message = "Hello, Java!";

The compiler knows that "Hello, Java!" is a String, so it infers that the message variable must be a String. Where this really shines is with more complex types. Imagine you have a List of Maps. The old way was very verbose:

List<Map<String, Integer>> list = new ArrayList<>();

With var, it's much cleaner:

var list = new ArrayList<Map<String, Integer>>();

See how much easier that is to read?

[SCENE 3: WHERE YOU CAN AND CANNOT USE VAR - 60 SECONDS]

You can use var in a few specific places: for local variables inside methods, in enhanced for loops, and in try-with-resources statements.

However, there are several places where you cannot use var. You can't use it for class fields, method parameters, or method return types. You also can't use it in a catch block, and you can't initialize a var variable with null, because the compiler wouldn't know what type to infer.

[SCENE 4: CODE DEMO - 120 SECONDS]

Let's jump into some code. We have a file called ModernJavaFeatures.java that shows off var nicely.

(Show oop-core/src/main/java/ModernJavaFeatures.java on screen)

Here you can see var being used for simple types like String, int, and double. The compiler infers these without any problem.

var employeeName = "Alice Johnson";  // Inferred as String
var employeeId = 12345;             // Inferred as int

But here's where it gets more interesting. We have a List of EmployeeRecord objects. Instead of writing out that long type declaration, we just use var.

var employees = List.of(
    new EmployeeRecord("Alice", 1, 75000),
    new EmployeeRecord("Bob", 2, 80000)
);

And we can use it in a for loop to iterate over that list, making the loop declaration much more compact.

for (var employee : employees) {
    System.out.println(employee.name());
}

[SCENE 5: JAVA 11 ENHANCEMENT - 90 SECONDS]

There's one more important enhancement to var that came in Java 11. You can now use var in lambda parameters, and the main reason for this was to enable annotations on lambda parameters.

Before Java 11, if you wanted to annotate a lambda parameter, you had to use the explicit type. For example, if you wanted to use a validation annotation like @Valid from Bean Validation, you'd write:

employees.stream()
    .filter((@Valid Employee emp) -> emp.getSalary() > 100000)
    .collect(toList());

With Java 11, you can use var and still add annotations:

employees.stream()
    .filter((@Valid var emp) -> emp.getSalary() > 100000)
    .collect(toList());

This might seem like a small thing, but it's actually very useful in enterprise applications where you're using frameworks like Spring Boot with Bean Validation. The annotation tells the framework to validate the parameter, and static analysis tools can also detect potential validation issues.

(Show the VarKeywordExercise.java file, section 4)

In our exercise file, you can see this in action. We define a simple @Valid annotation for demonstration, and then use it with var in lambda parameters. This was the primary motivation for adding var support to lambda parameters in Java 11.

[SCENE 6: SUMMARY - 45 SECONDS]

To wrap up, var is a great tool for making your local variable declarations more concise. The type is still checked at compile time, so you don't lose any type safety. Use it to make your code more readable, especially with those long, complicated generic types.

But a word of caution: don't overuse it. If the type isn't immediately obvious from the right-hand side of the assignment, it's probably better to be explicit and write out the full type. Readability is the key.

That's all for var. Thanks for watching, and happy coding!