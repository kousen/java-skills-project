[SCENE 1: INTRODUCTION - 30 SECONDS]

(Show Slide 1: Title Slide—"Writing to Files in Java")

Hi everyone. In this video, we'll learn how to make our programs persist data by writing content to files. This is a fundamental skill for everything from saving user data to creating logs and reports.

(Transition to Slide 2: Why Write to Files?)

Writing to files allows our applications to save their state, create permanent records, and exchange data with other systems. It's a core part of almost any real-world application.

[SCENE 2: TWO APPROACHES TO FILE I/O - 45 SECONDS]

(Show Slide 3: Two Approaches)

In modern Java, there are two main APIs for file operations. The traditional `java.io` package has been around since the beginning. It's simple, but has some drawbacks.

The modern approach is the `java.nio` package, which stands for New I/O. It was introduced to address the limitations of the original API. For any new code you write, you should always prefer the `java.nio` package. It's more powerful, has better error handling, and is more efficient.

[SCENE 3: THE TRY-WITH-RESOURCES STATEMENT - 60 SECONDS]

(Show Slide 4: The try-with-resources Statement)

Before we write any code, we have to talk about the single most important concept for file handling in Java: the `try-with-resources` statement. Whenever you open a file or any other resource, you must close it when you're done to avoid resource leaks.

In the old days, this was done in a messy `finally` block. Today, we use `try-with-resources`. By declaring the resource inside the parentheses of the `try` statement, you tell Java to automatically close it for you, no matter what happens. It's cleaner, safer, and non-negotiable for modern Java I/O.

[SCENE 4: CODE DEMO - TRADITIONAL AND MODERN MIX - 45 SECONDS]

(Transition to IDE showing `com.oreilly.javaskills.FileWriterExercise.java`)

Let's look at our `com.oreilly.javaskills.FileWriterExercise` example. Notice how we're mixing traditional and modern approaches for educational purposes.

(Highlight the demonstrateBufferedWriter method)

Here's the modern way: `Files.newBufferedWriter(Paths.get(filename))`. This is cleaner than the traditional nested writer approach. We still get BufferedWriter's efficiency, but with less verbosity.

(Show the createEmployeeReport method with PrintWriter)

For formatted output, we wrap the BufferedWriter in a PrintWriter. Notice we're using `Files.newBufferedWriter()` as the base—mixing modern NIO.2 with traditional PrintWriter for the best of both worlds.

(Show the append mode example)

For appending, we use `StandardOpenOption.CREATE` and `StandardOpenOption.APPEND`. This is more explicit and type-safe than the old boolean flag approach.

[SCENE 5: TRY IT OUT EXERCISE - 45 SECONDS]

(Transition to IDE showing `com.oreilly.javaskills.FileWriterExercise.java`)

Now for your Try It Out exercise. We'll create employee reports and logs using traditional file I/O.

(Show the createEmployeeReport method)

This method generates a formatted salary report. Notice how PrintWriter makes formatting easy with `printf`. We calculate totals and averages, creating a professional-looking text report.

(Show the CSV writing example)

Here we're writing CSV data—perfect for Excel import. The traditional API handles this well, though we need to manually format each line and remember those commas and quotes.

Try the exercise: create different types of files - reports, logs, configuration files. Practice with append mode for ongoing logs. Remember: always use try-with-resources!

[SCENE 6: CONCLUSION - 30 SECONDS]

(Show Slide 6: Key Takeaways)

To wrap up: traditional file I/O with FileWriter and BufferedWriter is still widely used, especially in legacy code. The key patterns are: always use try-with-resources, wrap FileWriter in BufferedWriter for efficiency, and remember append mode for log files.

While this approach works well, there's a more modern way. In our bonus video 7B, I'll show you the NIO.2 API that makes file operations incredibly simple—often just one line of code!

Thanks for watching! Practice with the FileWriterExercise, and I'll see you in the next video where we explore the modern approach to file I/O.