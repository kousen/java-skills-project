plugins {
    id 'java'
}

// Configure all subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    
    group = 'com.oreilly.java.skills'
    version = '1.0.0'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        // Basic logging for video 19
        implementation 'org.slf4j:slf4j-api:2.0.17'
        implementation 'ch.qos.logback:logback-classic:1.5.18'
        
        // Testing dependencies - using BOMs for version management
        testImplementation platform('org.junit:junit-bom:5.11.0')
        testImplementation platform('org.mockito:mockito-bom:5.18.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.assertj:assertj-core:3.26.3'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        
        // Explicit test framework implementation (Gradle 9.0 compatibility)
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
    
    test {
        useJUnitPlatform()
        testLogging {
            events = ["passed", "skipped", "failed"]
            exceptionFormat = "full"
        }
    }
}

// Spring Boot configuration removed - no longer needed for streamlined project

// Custom task to run examples
tasks.register('runExample', JavaExec) {
    description = 'Run a specific example: gradle runExample -Pmodule=foundations -PmainClass=NamingConventions'
    group = 'application'

    doFirst {
        if (!project.hasProperty('module') || !project.hasProperty('mainClass')) {
            throw new GradleException("Usage: gradle runExample -Pmodule=<module-name> -PmainClass=<ClassName>")
        }

        def moduleProject = project.findProject(":${module}")
        classpath = moduleProject.sourceSets.main.runtimeClasspath
        mainClass = project.property('mainClass')
    }
}
